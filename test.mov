```move
module TokenSwap {

    use std::signer;
    use std::string;
    use std::bytearray;
    use aptos_framework::coin::{Self, Coin};

    struct TokenSwap has key {
        owner: signer,
        initialized: bool,
    }

    // Initialize the smart contract ContractDemo entry fun initialize(account: &signer) acquires TokenSwap {
        move_to(account, TokenSwap {
            owner: signer::address_of(account),
            initialized: true,
        });
    }

    // Swap function which allows token swapping functionality
    public entry fun swap_tokens(account: &signer, input_token: Coin, output_token_type: int, amount: u64) acquires TokenSwap {
        let contract_address = signer::address_of(account);
        
        let mut stored_data: &mut TokenSwap = borrow_global_mut<TokenSwap>(contract_address);
        assert!(stored_data.initialized, 101, "Contract is not initialized!");

        let output_token = Coin::create(output_token_type, amount)?;

        Coin::transfer(input_token, account, move(output_token));

    }

    // Disconnect function that "ends" the operation without doing much, just to represent the flow
    public entry fun disconnect(account: &signer) acquires TokenSwap {
        let contract_address = signer::address_of(account);

        assert!(exists<TokenSwap>(contract_address), 102, "No contract data to disconnect.");
        let _ = borrow_global_mut<TokenSwap>(contract_address);

        // Currently, disconnect does not perform any action
    }
}
```
